cmake_minimum_required(VERSION 3.5)
project(AquiumOS)
# Integrated the .so executable standard for Aquium_OS
# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O2")
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_COMPILER_FLAG "${CMAKE_C_COMPILER_FLAG} -DWLR_USE_UNSTABLE ")
set(CMAKE_C_COMPILER gcc)
set(CMAKE_CXX_COMPILER g++)

# Set output directory for executables
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build)

# Find Qt packages
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5Core REQUIRED)

# Add include directories for Qt
include_directories(
    ${Qt5Widgets_INCLUDE_DIRS}
    ${Qt5Gui_INCLUDE_DIRS}
    ${Qt5Core_INCLUDE_DIRS}
)

# Find Wayland libraries and Wayland protocol scanner
find_package(PkgConfig REQUIRED)
pkg_check_modules(WAYLAND_SCANNER REQUIRED wayland-scanner)
pkg_check_modules(WLR REQUIRED wlroots-0.18)
pkg_check_modules(WAYLAND REQUIRED wayland-server wayland-client xkbcommon)

# Define wayland-scanner executable path
find_program(WAYLAND_SCANNER_EXECUTABLE wayland-scanner)
if (NOT WAYLAND_SCANNER_EXECUTABLE)
    message(FATAL_ERROR "Could not find 'wayland-scanner' executable")
endif()

# Debug output for Wayland paths
message(STATUS "WAYLAND_SCANNER_EXECUTABLE: ${WAYLAND_SCANNER_EXECUTABLE}")
message(STATUS "WAYLAND_SCANNER_INCLUDE_DIRS: ${WAYLAND_SCANNER_INCLUDE_DIRS}")
message(STATUS "WAYLAND_SCANNER_CFLAGS: ${WAYLAND_SCANNER_CFLAGS}")
message(STATUS "WAYLAND_SCANNER_LIBRARIES: ${WAYLAND_SCANNER_LIBRARIES}")
message(STATUS "WLR_INCLUDE_DIRS: ${WLR_INCLUDE_DIRS}")
message(STATUS "WLR_LIBRARIES: ${WLR_LIBRARIES}")
message(STATUS "WAYLAND_INCLUDE_DIRS: ${WAYLAND_INCLUDE_DIRS}")
message(STATUS "WAYLAND_LIBRARIES: ${WAYLAND_LIBRARIES}")

# Include directories
include_directories(
    ${WAYLAND_SCANNER_INCLUDE_DIRS}
    ${WLR_INCLUDE_DIRS}
    ${WAYLAND_INCLUDE_DIRS}
    ${CMAKE_SOURCE_DIR}/src
)

# Specify the path to Wayland protocols
set(WAYLAND_PROTOCOLS_PATH "/usr/share/wayland-protocols")

# Ensure WAYLAND_SCANNER_EXECUTABLE points to the Wayland scanner tool
find_program(WAYLAND_SCANNER_EXECUTABLE wayland-scanner)

# Ensure that the scanner tool is found
if (NOT WAYLAND_SCANNER_EXECUTABLE)
    message(FATAL_ERROR "wayland-scanner not found. Please install Wayland development libraries.")
endif()

# Specify where the generated file will go
set(XDG_SHELL_PROTOCOL_OUTPUT "${CMAKE_SOURCE_DIR}/src/xdg-shell-protocol.h")

# Generate the xdg-shell-protocol.h file
add_custom_command(
    OUTPUT ${XDG_SHELL_PROTOCOL_OUTPUT}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header
            ${WAYLAND_PROTOCOLS_PATH}/stable/xdg-shell/xdg-shell.xml
            ${XDG_SHELL_PROTOCOL_OUTPUT}
    DEPENDS ${WAYLAND_PROTOCOLS_PATH}/stable/xdg-shell/xdg-shell.xml
    COMMENT "Generating xdg-shell-protocol.h"
)
# Add a custom target to ensure the header file is generated
add_custom_target(generate_xdg_shell_protocol_header ALL
    DEPENDS ${CMAKE_SOURCE_DIR}/src/xdg-shell-protocol.h
)

# Define the source files for tinywl
set(gamer_compositor_SOURCES
    src/gamer_compositor.c
    src/xdg-shell-protocol.h  # The header is generated by the custom command
)

# Add the tinywl executable
add_executable(gamer_compositor.so ${gamer_compositor_SOURCES})

# Link libraries for tinywl
target_link_libraries(gamer_compositor.so
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for the tinywl target
add_definitions(-DWLR_USE_UNSTABLE)

# Add dependencies for tinywl
add_dependencies(gamer_compositor.so generate_xdg_shell_protocol_header)

# Source files for startAQ executable
set(startAQ_SOURCES
    src/Window_Manager.cpp
)

# Executable for startAQ
add_executable(startAQ.so ${startAQ_SOURCES})

# Link libraries for startAQ
target_link_libraries(startAQ.so
    Qt5::Widgets
    Qt5::Gui
    Qt5::Core
    X11
    Xrandr
    Xcursor
    GLEW
    GL
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for startAQ
target_compile_definitions(startAQ.so PRIVATE DWLR_USE_UNSTABLE)

# Source files for installer_dep executable
set(installer_dep_SOURCES
    src/installer_dep.cpp
)

# Executable for installer_dep
add_executable(installer_dep.so ${installer_dep_SOURCES})

# Link libraries for installer_dep
target_link_libraries(installer_dep.so
    Qt5::Widgets
    Qt5::Gui
    Qt5::Core
    X11
    Xrandr
    Xcursor
    GLEW
    GL
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for installer_dep
target_compile_definitions(installer_dep.so PRIVATE DWLR_USE_UNSTABLE)

# Source files for init_gameros executable
set(init_gameros_SOURCES
    src/init_window.cpp
)

# Executable for init_gameros
add_executable(init_gameros.so ${init_gameros_SOURCES})

# Link libraries for init_gameros
target_link_libraries(init_gameros.so
    Qt5::Widgets
    Qt5::Gui
    Qt5::Core
    X11
    Xrandr
    Xcursor
    GLEW
    GL
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for init_gameros
target_compile_definitions(init_gameros.so PRIVATE DWLR_USE_UNSTABLE)

# Source files for launchd executable
set(launchd_SOURCES
    src/launchd.cpp
)

# Executable for launchd
add_executable(launchd.so ${launchd_SOURCES})

# Link libraries for launchd
target_link_libraries(launchd.so
    Qt5::Widgets
    Qt5::Gui
    Qt5::Core
    X11
    Xrandr
    Xcursor
    GLEW
    GL
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for launchd
target_compile_definitions(launchd.so PRIVATE DWLR_USE_UNSTABLE)

# Source files for System_Services executable
set(System_Services_SOURCES
    src/System_Services.cpp
)

# Executable for System_Services
add_executable(System_Services.so ${System_Services_SOURCES})

# Link libraries for System_Services
target_link_libraries(System_Services.so
    Qt5::Widgets
    Qt5::Gui
    Qt5::Core
    X11
    Xrandr
    Xcursor
    GLEW
    GL
    ${WLR_LIBRARIES}
    ${WAYLAND_LIBRARIES}
)

# Add compiler definitions for System_Services
target_compile_definitions(System_Services.so PRIVATE DWLR_USE_UNSTABLE)
